#+BEGIN_HTML
---
title: Parser Combinators
date: 2015-01-31
---
#+END_HTML

#+BABEL: :exports both :tangle yes

* Introduction
I'm a big fan of parser combinators.
They are simple enough to be used with a quick custom level format.
They are flexible enough to parse your own programming language in.
And, they make beautiful code.
Many languages have implementations of parser combinators, but
i'm going to be using an implementation in javascript: [[https://github.com/jneen/parsimmon][parsimmon]].

** Why are you parsing things?
I like plain text formats. I tend to favor their use over visual tools, for the same reason
I favor markdown or org files over a WYSIWYG editor.
As a programmer I'm right at home manipulating text with my editor of choice.
Text is also easier to create, manipulate, and read with code.

** What are parser combinators ?
*** Parsers that you combine,
Obvious from the name, but that's exactly what they are.
You create small individual parsers.
#+begin_src js :results output
  const id     = Parsimmon.regex(/[A-Za-z_]/)
  const digits = Parsimmon.string('/[0-9]+/')

  console.log(digits.parse('validIdentifier'))
  console.log(id.parse('27'))
#+end_src

and you then combine them to form larger parsers.
#+begin_src js
  const atom = id.or(digits)

  console.log(atom.parse('validIdentifier'))
  console.log(atom.parse('27'))
#+end_src

*** They are monads
Being a monad gives these parsers some useful qualities.

**** They are immutable
Once you've made a parser, it will never change.
You can be free to reuse the indvidual parsers in any other composition,
without worrying about it having a side affect on other parsers.

**** They can be mapped with normal functions
First we can create a parser which consumes strings that look like digits,
and produces that string.
#+begin_src js
  const digitTokens = Parsimmon.string('/[0-9]+/')
  const parsedTokens = digitTokens.parse('12345')
  assert(parsedTokens.value,'12345')
#+end_src
This parser consumes a string, and produces that string.
But maybe we want to produce an integer value from that string, not the string itself.
#+begin_src js
  const digitTokens = Parsimmon.string('/[0-9]+/')
  const parsedTokens = digitTokens.parse('12345')
  assert(parsedDigits.value,'12345')

  const digits = digitTokens.map(token => parseInt(token))
  const parsedDigits = digits.parse('12345')
  assert(parsedDigits.value,12345)
#+end_src

Now we just made a new parser `digits` by mapping digitTokens with a function.
That function simply takes in a string and returns a int, and doesn't have to deal with any other details.
It's nice to be able to build up parsers from one to the next with simple mapping functions.

**** They help manage complexity
Parser combinators consume a portion of the stream of characters,
This is the real benefit to monads.
- How much of the stream to do we consume.
- Our new position after consuming text.
- Our previous position now that we've failed and have to backtrack.

* Example
** Determine the format

** Boil it down into grammer

** Test the individual components


** Implement

* Real world examples
** Targets

Used for describing levels, the parameters that made them up, including
molecules, the state of the molecules, the ratios, spawn rate.

Used for describing different molecules themselves. There were already existing
formats but none that actually worked in c#/unity without a substantial fee.

Have some examples of the format itself, and what the results of parsing it
will be.
