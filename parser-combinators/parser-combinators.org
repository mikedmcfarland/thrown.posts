#+BEGIN_HTML
---
title: Parser-Combinators
date: 2015-02-03
tags: [code]
---
#+END_HTML

#+STARTUP: showall indent
#+options: num:nil

* Introduction
Whenever I need to parse my own formats, I turn to parser combinator
Want to parse your own language or file format?
Want to do it the language your most productive in?
Don't want to spend the next week reading about formal language theory before seeing some results?
Yeah me too!

The first time I encountered Parser combinators was with reading some scala code, and I was instantly intrigued.
Code, that read like the definition of the format, that made parsers, that could be composed into more complex parsers.
CG3000D-RG
Sweet.
Well it turns out many languages have implementations of parser combinators,
this post is going to focus one implementation in javascript: [[https://github.com/jneen/parsimmon][parsimmon]].


** Why are you parsing things?
- I love plain text formats. When what your working with is visual, often a visual editor makes sense.
- Often plain text tools are more expressive, flexible and easier to create.
- Plus, as a programmer, I feel right at home manipulating text.

** what are parser combinators
*** Some code
#+begin_src js  :tangle yes
  var Parsimmon = require('parsimmon')

  var string = Parsimmon.string
  var regex  = Parsimmon.regex
  console.log('hello world')

  return {hello:"world"}
#+end_src

#+begin_src js  :tangle index.js
  var keyword = string('if')
  var whitespace = regex(/w/)
  keyword.funtimes()
#+end_src

#+begin_src js :tangle test/ParserSpec.js
  var assert = require('assert')
  var parser = require('../parser-combinators')
  describe("parser spec",function() {
    it('should be true',function() {
      assert(true)
    })
  })
#+end_src


*** Parsers that can be combined,
Hmmmm... maybe that's obvious but it's actually really quite simple, you build individual parsers, and then compose them into a larger parser.
Those parsers can also then be combined, to form new parsers...

*** A Monad
Yeah don't worry, this is a good thing. The parser combinator


I first encountered them while learning scala, and wished I had a practical reason to use them at my work. It took a while, but the day they made sense they were an absolute joy to work with.

had no practical use at my day job for them. Until one day
Messing with scala, I stumbled across a conce
One day, I was writing a scala program, and
Parser combinators are something I was introduced to while reading some scala code, and I was surprised by how
Used them for content creation tools, like level descriptions.

* What are they
Monads which consume a stream of characters, and aquire the relevant parts.

* Targets

Used for describing levels, the parameters that made them up, including
molecules, the state of the molecules, the ratios, spawn rate.

Used for describing different molecules themselves. There were already existing
formats but none that actually worked in c#/unity without a substantial fee.

##Starting with the use cases

Have some examples of the format itself, and what the results of parsing it
will be.

* Boil it down into grammer



* Test the individual components

After creating the grammer you are left with a bunch of indvidual, statelss,
parseters. This makes testing significantly easier, since exposing the grammer
is rather safe, and you can then write unit tests indvidually for each portion
of the grammer.


themselves, parsers. You can feed them bitsized parts of the file, and test
that they gather the appropriate parameters.

* They are stateless which makes
